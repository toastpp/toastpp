#ifndef BEM_LIB_3D_H
#define BEM_LIB_3D_H

// THis file is just a depository for Pi and Gauss points 
// and weighting coefficients.

const double eps=1.E-10;

//const int n_region=2;// for two regions only

const double pi=3.141592653589793;
const double pi1=1./(2.*pi);
const double pi4=1./(4.*pi);

//================================================================== 
//number of elements with prescribed Neumann bound. cond.

const int nbcn=0;
//================================================================== 

//================================================================== 
// -- number of elements with prescribed Robin bound. cond.
// ------------dfi/dn=m_rbc*fi+n_rbc-----------------------
//const int nbcr=n_ns[0];

//================================================================== 


//================================================================== 

// Ordinary Gaussian quadrature 


const int n_gauss_o=6;
const double gpts2=0.93246951420315202781;
const double gpts1=0.66120938646626451366;
const double gpts0=0.23861918608319690863;

const double wgpts2=0.17132449237917034504;
const double wgpts1=0.36076157304813860757;
const double wgpts0=0.46791393457269104739;

const double xg_k_1[6]={-gpts2,-gpts1,-gpts0, gpts0, gpts1, gpts2};
const double xg_k_2[6]={-gpts2,-gpts1,-gpts0, gpts0, gpts1, gpts2};

const double wg_k[6]={wgpts2,wgpts1,wgpts0,wgpts0,wgpts1,wgpts2};

//----------------------------------------------------------
// Gaussian integration points for the triangles------------


const int n_gauss=7;
const double beta1=0.47014206410511508;
const double beta2=0.10128650732345633;
const double alfa1=0.0597158717897698;
const double alfa2=0.7974269853530873;

const double xg_1[7]={1./3.,alfa1,beta1,beta1,alfa2,beta2,beta2};
const double xg_2[7]={1./3.,beta1,alfa1,beta1,beta2,alfa2,beta2};
const double xg_3[7]={1./3.,beta1,beta1,alfa1,beta2,beta2,alfa2};

const double wg[7]={0.225/2.,0.13239415278850619/2.,0.13239415278850619/2.,
                          0.13239415278850619/2.,
		          0.12593918054482713/2.,0.12593918054482713/2.,
		          0.12593918054482713/2.};

const int n_gauss_i=12;
const double wg_i[12] = {
  0.025422453185103408, 0.025422453185103408, 0.025422453185103408,
  0.058393137863189683, 0.058393137863189683, 0.058393137863189683,
  0.041425537809186787, 0.041425537809186787, 0.041425537809186787,
  0.041425537809186787, 0.041425537809186787, 0.041425537809186787};
const double xg_i_1[12] = {0.063089014491502228,0.87382197101699554,
	0.063089014491502228,0.24928674517091042,0.5014265096581792,
	0.24928674517091042,0.31035245103378440,0.6365024991213987,
	0.053145049844816947,0.6365024991213987,0.053145049844816947,
	0.31035245103378440};

const double xg_i_2[12] = {0.87382197101699554,0.063089014491502228,
	0.063089014491502228,0.5014265096581792,0.24928674517091042,
        0.24928674517091042,0.6365024991213987,0.31035245103378440,
        0.6365024991213987,0.053145049844816947,0.31035245103378440,
	0.053145049844816947};


const double shapf0[7] ={-0.11111111111111, -0.02807494322308, -0.02807494322308, -0.05258390110255, -0.08076859419189, -0.08076859419189, 0.47435260858554};
const double shapf1[7] ={ 0.44444444444444,  0.11229977289232,  0.88413424176407,  0.11229977289232,  0.32307437676755,  0.04103582626314, 0.32307437676755};
const double shapf2[7] ={-0.11111111111111, -0.05258390110255, -0.02807494322308, -0.02807494322308,  0.47435260858554, -0.08076859419189, -0.08076859419189};
const double shapf3[7] ={ 0.44444444444444,  0.11229977289232,  0.11229977289232,  0.88413424176407,  0.32307437676755,  0.32307437676755,  0.04103582626314};
const double shapf4[7] ={-0.11111111111111, -0.02807494322308, -0.05258390110255, -0.02807494322308, -0.08076859419189,  0.47435260858554, -0.08076859419189};
const double shapf5[7] ={0.44444444444444,   0.88413424176407,  0.11229977289232,  0.11229977289232,  0.04103582626314,  0.32307437676755,  0.32307437676755};

const double shapd0[7] ={ -0.333333333333, -0.880568256420, -0.880568256420,  0.761136512841,  0.594853970706,  0.594853970706, -2.189707941412 };
const double shapd1[7] ={  0.000000000000,  1.641704769261,  0.000000000000, -1.641704769261, -2.784561912119,  0.000000000000,  2.784561912119 };
const double shapd2[7] ={  0.333333333333, -0.761136512841,  0.880568256420,  0.880568256420,  2.189707941412, -0.594853970706, -0.594853970706 };
const double shapd3[7] ={  1.333333333333,  1.880568256420,  0.238863487159,  1.880568256420,  0.405146029294,  3.189707941412,  0.405146029294 };
const double shapd4[7] ={  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000 };
const double shapd5[7] ={ -1.333333333333, -1.880568256420, -0.238863487159, -1.880568256420, -0.405146029294, -3.189707941412, -0.405146029294 };
const double shapd6[7] ={ -0.333333333333, -0.880568256420, -0.880568256420,  0.761136512841,  0.594853970706,  0.594853970706, -2.189707941412 };
const double shapd7[7] ={ -1.333333333333, -0.238863487159, -1.880568256420, -1.880568256420, -3.189707941412, -0.405146029294, -0.405146029294 };
const double shapd8[7] ={  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000,  0.000000000000};
const double shapd9[7] ={  1.333333333333,  0.238863487159,  1.880568256420,  1.880568256420,  3.189707941412,  0.405146029294,  0.405146029294};
const double shapd10[7] ={ 0.333333333333,  0.880568256420, -0.761136512841,  0.880568256420, -0.594853970706,  2.189707941412, -0.594853970706 };
const double shapd11[7] ={ 0.000000000000,  0.000000000000,  1.641704769261, -1.641704769261,  0.000000000000, -2.784561912119,  2.784561912119 };


//ofstream lomef("carlos.m", ios::out);



#endif
