Toast++ compilation and installation           31.3.2014
====================================

Contents
--------

1.   Obtaining the toast sources
1.1  Toast sources from CVS
1.2  Toast sources from a tarball

2.   Compiling the sources
2.1  Linux
2.2  Windows
2.3  Mac OS X


1. Obtaining the toast sources
------------------------------
The Toast++ sources are available from the SVN repository on Sourceforge.
To check out a copy, you need an SVN client.

Command line: 

svn checkout svn://svn.code.sf.net/p/toastpp/code/ toastpp-code

or

svn checkout http://svn.code.sf.net/p/toastpp/code/ toastpp-code



2. Compiling the sources
------------------------

2.1 Linux
---------

2.1.1 Preliminaries:
--------------------

You need up-to-date GNU g++ and gfortran compilers (4.2 or later).

For compiling the source-level help documents you need doxygen
(http://www.stack.nl/~dimitri/doxygen/)


2.1.2 Configuration and compilation
-----------------------------------

Set the TOASTDIR environment variable:

	cd toast
	setenv TOASTDIR $PWD

Configure the makefiles:

	./configure

(for additional configuration options, type: ./configure --help)

Set the toast environment:

	source toast.env

(note that toast.env is set up for csh. You may have to edit the script to
run in other shells).

Make the numerics libraries:

	make numerics

Make the toast libararies and applications:

	make toast

The run-time libraries are installed in $TOASTDIR/lib. Make sure that your
LD_LIBRARY_PATH variable points to this directory (this is done automatically
by the toast.env script).
The toast applications are installed in $TOASTDIR/bin. You may want to set
your path variable to include that directory.

To compile the html help files, type

	make doc

This requires doxygen to be installed and on the search path. The html
help entry point is located in

	doc/start.html

Note that the source-level documentation is not yet complete.

Toast comes with a set of tests for various forward and inverse solver cases
to ensure a successful installation. To run the tests, type

	make test

in the Toast main directory. Note that it can a significant amount of time
to run all tests. You can also run individual test sections by going into one
of the subdirectories of the 'test' directory tree and typing

	make


2.1.3 Compiling the mex files for the Matlab toolbox
----------------------------------------------------

If you want to compile the Matlab toolbox, you need to configure the mex
compiler:

From within matlab, type

	mex -setup

and select the option relating to the gcc compiler.

This will write a file

	$HOME/.matlab/<matlab-version>/mexopts.sh

Edit this file by appending the line

	. $TOASTVER/mexopts.incl

to the end of it (don't forget the single dot at the beginning of the line).
This will tell the mex compiler about toast-specific libararies and include
paths.

Then, in the toast main directory, type

	make matlab

Finally, you need to add the search paths for the mex files and matlab scripts.
Launch Matlab from the toast main directory, and type

	mtoast_install

Check that all listed directories are ok (including the mex file path) and
save. This will write a file pathdef.m either to the Matlab system directory
if you have the permissions to do so, or to the local directory.
If pathdef.m is stored locally, the toast paths will only be loaded if you
launch matlab from this directory.

Type

	doc toast
	help toast

for toolbox documentation and a list of toast functions.


2.1.4 Compiling with fluorescence imaging support
-------------------------------------------------
To add support for fluorescence reconstruction (fDOT), you need to add a
parameter to your call to configure:

./configure --enable-fdot

and proceed with the compilation as described above. Note that the fluorescence
module includes code for projecting source distributions onto a mesh surface,
and exitance measurements from the mesh surface to an imaging system. The
projection code requires the libraries and header files of the Mesa 3D Graphics
Library (http://www.mesa3d.org/) installed on your system.


2.2 Windows
-----------

2.2.1 Preliminaries
-------------------

You will need Visual Studio 2005 or later to compile the toast libraries,
executables and mex files.

Compiled BLAS and Lapack libraries are required. The VS project files should
be configured to link them.

For compiling the source-level help documents you need doxygen
(http://www.stack.nl/~dimitri/doxygen/)


2.1.2 Compilation
-----------------

From the VS development environment, load the toast solution file located in

	win32/VS2005/toast.sln

and compile.

For the matlab mex files, load

	toast_matlab.sln

and compile. Configuring the Matlab search path works as for the Linux version
(see 2.1.3).


2.3 Mac OS X
------------

2.3.1 Preliminaries
-------------------

At present only the new matlab2 interface to toast is supported on Mac OS X. 

The following build tools are required for compilation:

	1. Xcode (tested version 5.1.1) from the Mac App Store,
	2. gfortran (tested gfortran-mp-4.4) from, e.g., MacPorts.


2.3.2 Building the numerics libraries
-------------------------------------

Open a terminal window and chage to the directory where you have placed the
toast sources. Then set the TOASTDIR environment variable:

	export TOASTDIR=$PWD

Configure the makefiles with 

	./configure F77=[path to gfortran] --disable-blas-shared --disable-lapack-shared

to perform a static link against the fortran runtime. The suggested fortran 
compiler (see 2.3.1) has a default path /opt/local/bin/gfortran-mp-4.4.

Once configuration completes create a dummy malloc header,
	
	touch malloc.h

and set the toast environment variables:

	source toastenv.sh

The numerics libaries can now be built:

	make numerics


2.3.3 Building the matlab2 interface and requisite toast libraries
------------------------------------------------------------------

Load the toastpp Xcode workspace located in the mac subdirectory of the
source tree.

Enter the Build Settings tab for the matlab2 target and change the MATLABAPP
setting under the 'User Defined' subsection to the version of MATLAB against
which you wish to compile.

Build with Command-B

Finally, you need to add the search paths for the mex files and matlab scripts.
Launch Matlab from the toast main directory, and type

	mtoast2_install
	

Troubleshooting FAQ
-------------------

1. FORTRAN compiler problems

   The Fortran libraries must be compiled with gfortran, _not_ with g77
   which was part of older GNU compiler installations. If you use g77, you
   will get linker errors related to mismatched underscores in the symbol
   names exported by the Fortran compilers (this only seems to happen on
   64-bit architectures).
