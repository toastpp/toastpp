% Temporal moments
%
% This example compares the temporal moments (integrated intensity,
% mean time, variance and skew) generated by integrating the explicit
% temporal profile with the direct moment calculation.

fprintf('fwd_tpsf: Calculation of temporal moments\n\n');
fprintf('This example compares the temporal moments (integrated intensity,\n');
fprintf('mean time, variance and skew) generated by integrating the explicit\n');
fprintf('temporal profile with the direct moment calculation.\n\n');

meshname = '../meshes/circle25_32.msh';
qmname = '../meshes/circle25_1x32.qm';
nmom = 3;
dotest = exist('istest');

% mesh and optode setup
hMesh = toastReadMesh(meshname);
toastReadQM(hMesh,qmname);
n = toastMeshNodeCount(hMesh);
qvec = toastQvec(hMesh, 'Isotropic', 'Gaussian', 1);
mvec = toastMvec(hMesh, 'Gaussian', 1);

% Optical parameters
mua = ones(n,1) * 0.01;
mus = ones(n,1) * 1;
ref = ones(n,1) * 1;

theta = 0.5; % time coupling (0=explicit, 1/2=Crank-Nicholson, 1=implicit)
dt = 2;      % time step interval
nstep = 3000; % number of time steps

clear gamma;
t = [1:nstep]*dt;

% Set up the required FEM matrices
smat = real(toastSysmat(hMesh, mua, mus, ref, 0)); % zero-frequency system matrix
mmat = toastMassmat(hMesh);                        % mass matrix
K0 = -(smat * (1-theta) - mmat * 1/dt);            % backward difference matrix
K1 = smat * theta + mmat * 1/dt;                   % forward difference matrix

[L U] = lu(K1);

% initial condition
q = qvec/dt;
phi = U\(L\q);
gamma(1,:) = mvec.' * phi;

% loop over time steps
for i=2:nstep
    q = K0 * phi;              % new source vector from current field
    phi = U\(L\q);             % new field
    gamma(i,:) = mvec.' * phi; % project to boundary
end
if ~dotest
    plot(t,log(gamma))
end

% now calculate the moments by numerical integration
ndat = size(gamma,2);
for i=1:ndat
    intens(i) = dt*trapz(gamma(:,i));
end
for j=1:nmom
    tn = t.^j;
    for i=1:ndat
        mm = dt*trapz(tn' .* gamma(:,i));
        mom(j,i) = mm/intens(i);
    end
end

% compare with direct calculation
phi0 = smat\qvec;
dintens = full(reshape (mvec.' * phi0, 1, []));
for mm = 1:nmom
  phi = mm*(smat\(mmat*phi0));
  gamma = reshape(mvec.' * phi,1,[]);
  dmom(mm,:) = gamma ./ dintens;
  phi0 = phi;
end
dmom = full(dmom);

% compute moments inside medium
phi0 = smat\qvec;
phi00 = phi0;
for mm = 1:nmom
    phi = mm*(smat\(mmat*phi0));
    mphi(:,mm) = phi./phi00;
    phi0 = phi;
end
grd = [128,128];
hbasis = toastSetBasis(hMesh,grd);
meant = reshape(toastMapMeshToBasis(hbasis,mphi(:,1)), grd);
figure; imagesc(meant); axis equal tight;

if ~dotest
    % Plot comparisons of moments (explicit TPSF vs direct)
    figure;
    semilogy(intens);
    hold on
    semilogy(dintens,'r');
    title('0th moment: boundary exitance');
    legend('integrated TPSF','direct');

    figure;
    plot(mom(1,:));
    hold on
    plot(dmom(1,:),'r');
    title('1st moment: boundary mean time)');
    legend('integrated TPSF','direct');

    figure;
    plot(mom(2,:));
    hold on
    plot(dmom(2,:),'r');
    title ('2nd moment: boundary variance)');
    legend('integrated TPSF','direct');

    figure;
    plot(mom(3,:));
    hold on
    plot(dmom(3,:),'r');
    title ('3nd moment: boundary skew)');
    legend('integrated TPSF','direct');

    % Plot relative differences
    figure;
    plot((dintens-intens)./dintens);
    title('Rel. difference intensity');

    figure;
    plot((dmom(1,:)-mom(1,:))./dmom(1,:));
    title('Rel. difference mean time');

    figure;
    plot((dmom(2,:)-mom(2,:))./dmom(2,:));
    title('Rel. difference variance');

    figure;
    plot((dmom(3,:)-mom(3,:))./dmom(3,:));
    title('Rel. difference skew');

else

    % test comparison
    if exist('fwd1.mat','file')
        dat = [intens;mom;dintens;dmom];
        load fwd1
        reldiff = (dat-ref)./ref;
        err = max(max(abs(reldiff)));
        pass = (err < 1e-6);
        if pass
            fprintf ('fwd_tpsf: passed\n');
        else
            fprintf ('fwd_tpsf: failed\n');
        end
    end
    
end