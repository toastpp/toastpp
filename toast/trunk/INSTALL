Toast++ compilation and installation           31.3.2014
====================================

Contents
--------

1.   Obtaining the toast sources
1.1  Toast sources from CVS
1.2  Toast sources from a tarball

2.   Compiling the sources
2.1  Linux
2.2  Windows


1. Obtaining the toast sources
------------------------------
The Toast++ sources are available from the SVN repository on Sourceforge.
To check out a copy, you need an SVN client.

Command line: 

svn checkout svn://svn.code.sf.net/p/toastpp/code/ toastpp-code

or

svn checkout http://svn.code.sf.net/p/toastpp/code/ toastpp-code



2. Compiling the sources
------------------------

2.1 Linux
---------

2.1.1 Preliminaries:
--------------------

You need up-to-date GNU g++ and gfortran compilers (4.2 or later).

For compiling the source-level help documents you need doxygen
(http://www.stack.nl/~dimitri/doxygen/)


2.1.2 Configuration and compilation
-----------------------------------

Set the TOASTDIR environment variable:

	cd toast
	setenv TOASTDIR $PWD

Configure the makefiles:

	./configure

(for additional configuration options, type: ./configure --help)

Set the toast environment:

	source toast.env

(note that toast.env is set up for csh. You may have to edit the script to
run in other shells).

Make the numerics libraries:

	make numerics

Make the toast libararies and applications:

	make toast

The run-time libraries are installed in $TOASTDIR/lib. Make sure that your
LD_LIBRARY_PATH variable points to this directory (this is done automatically
by the toast.env script).
The toast applications are installed in $TOASTDIR/bin. You may want to set
your path variable to include that directory.

To compile the html help files, type

	make doc

This requires doxygen to be installed and on the search path. The html
help entry point is located in

	doc/start.html

Note that the source-level documentation is not yet complete.

Toast comes with a set of tests for various forward and inverse solver cases
to ensure a successful installation. To run the tests, type

	make test

in the Toast main directory. Note that it can a significant amount of time
to run all tests. You can also run individual test sections by going into one
of the subdirectories of the 'test' directory tree and typing

	make


2.1.3 Compiling the mex files for the Matlab toolbox
----------------------------------------------------

If you want to compile the Matlab toolbox, you need to configure the mex
compiler:

From within matlab, type

	mex -setup

and select the option relating to the gcc compiler.

This will write a file

	$HOME/.matlab/<matlab-version>/mexopts.sh

Edit this file by appending the line

	. $TOASTVER/mexopts.incl

to the end of it (don't forget the single dot at the beginning of the line).
This will tell the mex compiler about toast-specific libararies and include
paths.

Then, in the toast main directory, type

	make matlab

Finally, you need to add the search paths for the mex files and matlab scripts.
Launch Matlab from the toast main directory, and type

	mtoast_install

Check that all listed directories are ok (including the mex file path) and
save. This will write a file pathdef.m either to the Matlab system directory
if you have the permissions to do so, or to the local directory.
If pathdef.m is stored locally, the toast paths will only be loaded if you
launch matlab from this directory.

Type

	doc toast
	help toast

for toolbox documentation and a list of toast functions.


2.1.4 Compiling with fluorescence imaging support
-------------------------------------------------
To add support for fluorescence reconstruction (fDOT), you need to add a
parameter to your call to configure:

./configure --enable-fdot

and proceed with the compilation as described above. Note that the fluorescence
module includes code for projecting source distributions onto a mesh surface,
and exitance measurements from the mesh surface to an imaging system. The
projection code requires the libraries and header files of the Mesa 3D Graphics
Library (http://www.mesa3d.org/) installed on your system.


2.2 Windows
-----------

2.2.1 Preliminaries
-------------------

You will need Visual Studio 2008 or later to compile the toast libraries,
executables and mex files. The VS project files included are for VS2008,
but Visual Studio can convert them to later versions.

Compiled BLAS and Lapack libraries are required. The VS project files should
be configured to link them.

For compiling the source-level help documents you need doxygen
(http://www.stack.nl/~dimitri/doxygen/)


2.2.2 Support for external libraries
------------------------------------
Toast supports a number of optional external libraries that can enhance
functionality and performance.

To build Toast with linkings to these external libraries in Windows, you
need to

- download and install the libraries from their respective web sites
- configure the Toast project files to link to them


2.2.2.1 Pthreads support
------------------------
Toast can use threads to speed up certain operations on shared memory
parallel (SMP) architectures. Toast is using the POSIX thread library
(pthreads). To build Toast with pthreads support

- download a Windows pthreads library for your architecture (Win32 or
  x64), for example from here: http://sourceforge.net/projects/pthreads4w/

- In visual Studio, open the Toast solution (<toast-root>\win\VS2008\toast.sln)

- Open the Project Manager for the libmath project.

- Open the "packages" property sheet.

- Under Common Properties | General | Inherited Project Property Sheets, add
  .\pthreads.vsprops

- Click "Apply"

- Open the "pthreads" property sheet that has now been inserted under "packages".

- Go to Common Properties | User macros

- Edit the "PthreadsDir", "PthreadsLibDir", "PthreadsIncludeDir" and
  "PthreadsLibName" macros to your pthreads installation. If you are using
  a common directory tree for your external Toast dependencies, you can make
  use of the "ExtPackageDir" macro defined in the "packages" property sheet.
  (you will have to edit the macro first).


2.2.3 Compilation
-----------------

From the VS development environment, load the toast solution file located in

	win32/VS2005/toast.sln

and compile.

For the matlab mex files (v.1), load

	toast_matlab.sln

and compile.

To compile the mex files for the new Toast toolbox interface (v.2), load

	toast_matlab2.sln

and compile. (You can compile both interfaces, but your matlab script can
only access one of the interfaces at a time).

Configuring the Matlab search path for the toolbox v.1 or v.2 works as
for the Linux version (see 2.1.3).



Troubleshooting FAQ
-------------------

1. FORTRAN compiler problems

   The Fortran libraries must be compiled with gfortran, _not_ with g77
   which was part of older GNU compiler installations. If you use g77, you
   will get linker errors related to mismatched underscores in the symbol
   names exported by the Fortran compilers (this only seems to happen on
   64-bit architectures).
